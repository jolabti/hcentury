<?php
//use Restserver\Libraries\REST_Controller;
require APPPATH . 'libraries/REST_Controller.php';
use Restserver\Libraries\REST_Controller;
defined('BASEPATH') OR exit('No direct script access allowed');

// This can be removed if you use __autoload() in config.php OR use Modular Extensions
/** @noinspection PhpIncludeInspection */
//require APPPATH . 'libraries/REST_Controller.php';

/**
 * This is an example of a few basic user interaction methods you could use
 * all done with a hardcoded array
 *
 * @package         CodeIgniter
 * @subpackage      Rest Server
 * @category        Controller
 * @author          Phil Sturgeon, Chris Kacerguis
 * @license         MIT
 * @link            https://github.com/chriskacerguis/codeigniter-restserver
 */
class V1 extends REST_Controller {

    function __construct()
    {
        // Construct the parent class
        parent::__construct();

        // Configure limits on our controller methods
        // Ensure you have created the 'limits' table and enabled 'limits' within application/config/rest.php
        $this->methods['users_get']['limit'] = 500; // 500 requests per hour per user/key
        $this->methods['users_post']['limit'] = 100; // 100 requests per hour per user/key
        $this->methods['users_delete']['limit'] = 50; // 50 requests per hour per user/key
    }

    public function users_get()
    {
        // Users from a data store e.g. database
        $users = [
            ['id' => 1, 'name' => 'John', 'email' => 'john@example.com', 'fact' => 'Loves coding'],
            ['id' => 2, 'name' => 'Jim', 'email' => 'jim@example.com', 'fact' => 'Developed on CodeIgniter'],
            ['id' => 3, 'name' => 'Jane', 'email' => 'jane@example.com', 'fact' => 'Lives in the USA', ['hobbies' => ['guitar', 'cycling']]],
        ];

        $id = $this->get('id');

        // If the id parameter doesn't exist return all the users

        if ($id === NULL)
        {
            // Check if the users data store contains users (in case the database result returns NULL)
            if ($users)
            {
                // Set the response and exit
                $this->response($users, REST_Controller::HTTP_OK); // OK (200) being the HTTP response code
            }
            else
            {
                // Set the response and exit
                $this->response([
                    'status' => FALSE,
                    'message' => 'No users were found'
                ], REST_Controller::HTTP_NOT_FOUND); // NOT_FOUND (404) being the HTTP response code
            }
        }

        // Find and return a single record for a particular user.

        $id = (int) $id;

        // Validate the id.
        if ($id <= 0)
        {
            // Invalid id, set the response and exit.
            $this->response(NULL, REST_Controller::HTTP_BAD_REQUEST); // BAD_REQUEST (400) being the HTTP response code
        }

        // Get the user from the array, using the id as key for retrieval.
        // Usually a model is to be used for this.

        $user = NULL;

        if (!empty($users))
        {
            foreach ($users as $key => $value)
            {
                if (isset($value['id']) && $value['id'] === $id)
                {
                    $user = $value;
                }
            }
        }

        if (!empty($user))
        {
            $this->set_response($user, REST_Controller::HTTP_OK); // OK (200) being the HTTP response code
        }
        else
        {
            $this->set_response([
                'status' => FALSE,
                'message' => 'User could not be found'
            ], REST_Controller::HTTP_NOT_FOUND); // NOT_FOUND (404) being the HTTP response code
        }
    }

    public function users_post()
    {
        // $this->some_model->update_user( ... );
        $message = [
            'id' => 100, // Automatically generated by the model
            'name' => $this->post('name'),
            'email' => $this->post('email'),
            'message' => 'Added a resource'
        ];

        $this->set_response($message, REST_Controller::HTTP_CREATED); // CREATED (201) being the HTTP response code
    }

    public function users_delete()
    {
        $id = (int) $this->get('id');

        // Validate the id.
        if ($id <= 0)
        {
            // Set the response and exit
            $this->response(NULL, REST_Controller::HTTP_BAD_REQUEST); // BAD_REQUEST (400) being the HTTP response code
        }

        // $this->some_model->delete_something($id);
        $message = [
            'id' => $id,
            'message' => 'Deleted the resource'
        ];

        $this->set_response($message, REST_Controller::HTTP_NO_CONTENT); // NO_CONTENT (204) being the HTTP response code
    }

    public function getbellboy_get(){

            // $this->load->model("Modelcentury");
             $data = $this->Modelcentury->showBellBoy();

             $this->set_response($data, REST_Controller::HTTP_OK);    

    }

    public function getkamar_get(){

            // $this->load->model("Modelcentury");
             $data = $this->Modelcentury->showKamar();

             $this->set_response($data, REST_Controller::HTTP_OK);    

    }


    public function inputkamar_post(){

            $resMessage=array();
            // $this->load->model("Modelcentury");
                          
             $this->db->trans_start();   
             $data = $this->Modelcentury->insertKamar($this->post("kode_kamar"),$this->post("tipe_kamar"));
 
           

             $this->db->trans_complete();

             if($this->post("kode_kamar")==""|| $this->post("tipe_kamar")==""){

                   $resMessage = array(
                       "message" => "Masih ada input kosong",
                        "code"=> REST_Controller::HTTP_NOT_FOUND
                  ) ;
 
                  $this->set_response($resMessage, REST_Controller::HTTP_NOT_FOUND);   

             }


             else if ($this->db->trans_status() === FALSE)
             {
                
                $resMessage = array(
                       "message" => "Gagal",
                       "code"=> REST_Controller::HTTP_ERR
                 ) ;

                  $this->set_response($resMessage, REST_Controller::HTTP_ERR);   
             
             }
             else{
                
                $resMessage = array(
                       "message" => "Data Berhasil Masuk",
                       "code"=> REST_Controller::HTTP_OK
                 ) ;

                  $this->set_response($resMessage, REST_Controller::HTTP_OK);   

             }



           

    }

    public function inputkomentar_post(){

            // $this->load->model("Modelcentury");
              



            $data = $this->Modelcentury->insertKomentar($this->post("kode_komentar"),$this->post("komentar"));
 
             $resMessage = array(
                       "message" => "Berhasil",
                       "code"=> REST_Controller::HTTP_OK);

             $this->set_response($resMessage, REST_Controller::HTTP_OK);   

    }

    public function auth_post(){
        
           $emailTemp = $this->input->post("email");
           $passwordTemp = $this->input->post("password");
        
           $cekLogin = $this->Modelcentury->modelLogin($emailTemp,$passwordTemp); 

           if($cekLogin > 0 ){

                    $this->setMessage("Berhasil", 200,""); 
           }

           else{

                    $this->setMessage("Gagal Login", 400,"");
           }


           //echo json_encode($this->Modelcentury->modelLogin($emailTemp,$passwordTemp));     

            
    }

    public function masterPegawai_get(){


            if($this->Modelcentury->modelMasterPegawai()!=null){
                $this->setMessage("Data ditemukan", 200, $this->Modelcentury->modelMasterPegawai());
            }
            else{
                $this->setMessage("Data kosong", 400, "");
            }

    }


    public function masterJabatan_get(){

        if($this->Modelcentury->modelMasterJabatan()!=null){
            $this->setMessage("Master Jabatan Di Temukan",200,$this->Modelcentury->modelMasterJabatan());
        }
        else{
           
            $this->setMessage("Data Jabatan kosong", 400, "");

        }
 
    }

    public function masterKamar_get(){

        if($this->Modelcentury->modelMasterKamar()!=null){
            $this->setMessage("Master Kamar Di Temukan",200,$this->Modelcentury->modelMasterKamar());
        }
        else{
           
            $this->setMessage("Data Jabatan kosong", 400, "");

        }
    }

    public function trxBellboyCommander_get(){

       // echo json_encode($this->Modelcentury->modelBellboyCommander());
    
       if($this->Modelcentury->modelBellboyCommander()!=null){
        $this->setMessage("Commander dan pesanan tamu ada",200,$this->Modelcentury->modelBellboyCommander());
        
        }
        else{
        
            $this->setMessage("Data Jabatan kosong", 400, "");

        }

    }

    public function trxBellboyAcceptor_get(){

        // echo json_encode($this->Modelcentury->modelBellboyCommander());
     
        if($this->Modelcentury->modelBellboyAcceptor()!=null){
         $this->setMessage("Acceptor dan pesanan tamu ada",200,$this->Modelcentury->modelBellboyAcceptor());
         
         }
         else{
         
             $this->setMessage("Data Jabatan kosong", 400, "");
 
         }
 
     }




    public function trxBellboyAccepter_get(){

        
    }

    function setMessage($message, $statusCode, $object)
    {

        $resMessage = array();    

        if($statusCode==200){

            if($object!=null || $object!=""){
                
                $resMessage = array(
                    "message" => $message,
                    "data" => $object,
                    "code"=> REST_Controller::HTTP_OK);
                    
                $this->set_response($resMessage, REST_Controller::HTTP_OK);
            }

           else{

            $resMessage = array(
                "message" => $message,               
                "code"=> REST_Controller::HTTP_OK);
                
            $this->set_response($resMessage, REST_Controller::HTTP_OK);
           
        } 
                
        }
        else{

            $resMessage = array(
                "message" => $message,
                "code"=> REST_Controller::HTTP_NOT_FOUND);

                $this->set_response($resMessage, REST_Controller::HTTP_NOT_FOUND);
        }
        

    }


}
